<?phpdefine('DC_REQUEST_PATH', 'system/get-dynamic/');define('DC_BONUS_INFO_FIELD_NAME', 'field_bonus_info');/** * hook_menu implementation * @return array */function dynamic_content_menu() {  $items = array();  //provide JSON for dynamic content  $items[DC_REQUEST_PATH . '%'] = array(    'title' => 'Dynamic content',    'page callback' => '_dc_load_content',    'page arguments' => array(2),    'access callback' => TRUE,    'file' => 'dynamic_content.ajax_processing.inc',  );  //provide block in admin config page  $items['admin/config/tradefxl'] = array(    'title' => 'TradeFXL Functionality Configuration',    'position' => 'left',    'weight' => -100,    'page callback' => 'system_admin_menu_block_page',    'access arguments' => array('administer site configuration'),    'file path' => drupal_get_path('module', 'system'),  );  //provide page settings for dynamic content variables  $items['admin/config/tradefxl/dc-variables'] = array(    'title' => 'Dynamic content configuration',    'description' => 'System pathes & links configuration for Dynamic Content',    'page callback' => 'drupal_get_form',    'page arguments' => array('variable_module_form', 'dynamic_content'),    'access arguments' => array('administer site configuration'),  );  return $items;}/** * hook_variable_info implementation * * @return array */function dynamic_content_variable_info() {  $variables = array();  $variables['dc_live_registration_link_client_desktop'] = array(      'title' => t('Link to live registration for Desktop clients'),      'default' => 'real-registration',      'type' => 'string',      'group' => 'Dynamic content',      'token' => TRUE,  );  $variables['dc_live_platform_link_client_desktop'] = array(    'title' => t('Link to live platform for Desktop clients'),    'default' => 'https://live-trader.markets.com/fxclient5/',    'type' => 'string',    'group' => 'Dynamic content',    'token' => TRUE,  );  $variables['dc_live_platform_link_client_tablet_android'] = array(    'title' => t('Link to live platform for Android Tablet clients'),    'default' => 'https://live-trader.markets.com/fxclient5/',    'type' => 'string',    'group' => 'Dynamic content',    'token' => TRUE,  );  $variables['dc_live_platform_link_client_tablet_ios'] = array(    'title' => t('Link to live platform for iOS Tablet clients'),    'default' => 'https://live-trader.markets.com/fxclient5/',    'type' => 'string',    'group' => 'Dynamic content',    'token' => TRUE,  );  $variables['dc_live_platform_link_client_mobile_android'] = array(    'title' => t('Link to live platform for Android Mobile clients'),    'default' => 'http://app.appsflyer.com/com.markets.android',    'type' => 'string',    'group' => 'Dynamic content',    'token' => TRUE,  );  $variables['dc_live_platform_link_client_mobile_ios'] = array(    'title' => t('Link to live platform for iOS Mobile clients'),    'default' => 'http://app.appsflyer.com/id875786044',    'type' => 'string',    'group' => 'Dynamic content',    'token' => TRUE,  );  $variables['dc_demo_registration_link_client_desktop'] = array(      'title' => t('Link to Demo registration for Desktop clients'),      'default' => 'demo-registration',      'type' => 'string',      'group' => 'Dynamic content',      'token' => TRUE,  );  $variables['dc_demo_platform_link_client_desktop'] = array(    'title' => t('Link to demo platform for Desktop clients'),    'default' => 'https://demo-trader.markets.com/fxclient5/',    'type' => 'string',    'group' => 'Dynamic content',    'token' => TRUE,  );  $variables['dc_demo_platform_link_client_tablet_android'] = array(    'title' => t('Link to demo platform for Android Tablet clients'),    'default' => 'https://demo-trader.markets.com/fxclient5/',    'type' => 'string',    'group' => 'Dynamic content',    'token' => TRUE,  );  $variables['dc_demo_platform_link_client_tablet_ios'] = array(    'title' => t('Link to demo platform for iOS Tablet clients'),    'default' => 'https://demo-trader.markets.com/fxclient5/',    'type' => 'string',    'group' => 'Dynamic content',    'token' => TRUE,  );  $variables['dc_demo_platform_link_client_mobile_android'] = array(    'title' => t('Link to demo platform for Android Mobile clients'),    'default' => '',    'type' => 'string',    'group' => 'Dynamic content',    'token' => TRUE,  );  $variables['dc_demo_platform_link_client_mobile_ios'] = array(    'title' => t('Link to demo platform for iOS Mobile clients'),    'default' => '',    'type' => 'string',    'group' => 'Dynamic content',    'token' => TRUE,  );  $variables['dc_call_to_action_text_desktop'] = array(    'title' => t('Call to action for Desktop clients'),    'default' => 'Start Trading Now',    'type' => 'string',    'group' => 'Dynamic content',    'token' => TRUE,    'translatable' => TRUE,  );  $variables['dc_call_to_action_text_mobile'] = array(    'title' => t('Call to action for Mobile clients'),    'default' => 'Download App',    'type' => 'string',    'group' => 'Dynamic content',    'token' => TRUE,    'translatable' => TRUE,  );  $variables['dc_tracking_cookies_life_time'] = array(    'title' => t('Life time of cookies with tracking parameters'),    'default' => '30',    'type' => 'string',    'group' => 'Marketing tracking',    'token' => TRUE,  );  $variables['dc_markets_contact_form_email_send_from'] = array(    'title' => t('Email send From'),    'default' => 'ContactUsForm@markets.com',    'type' => 'string',    'group' => 'Contact Us Page',    'token' => TRUE,  );  $variables['dc_widget_domain_url'] = array(      'title' => t('Widget domain url'),      'default' => 'https://widgets.markets.com',      'type' => 'string',      'group' => 'Dynamic content',      'token' => TRUE,  );  $variables['dc_mt4_mobile'] = array(      'title' => t('mt4 Mobile Trader Login'),      'default' => '/mobile-trader-login',      'type' => 'string',      'group' => 'Dynamic content',      'token' => TRUE,  );  $variables['dc_mt4_website'] = array(      'title' => t('mt4 website link'),      'default' => 'http://mt4.markets.com/en',      'type' => 'string',      'group' => 'Dynamic content',      'token' => TRUE,  );  $variables['dc_widget_quotes_domain_url'] = array(      'title' => t('Widget quotes domain url'),      'default' => 'https://widget.markets.com',      'type' => 'string',      'group' => 'Dynamic content',      'token' => TRUE,  );  $variables['dc_webtrader_link'] = array(      'title' => t('WebTrader link'),      'default' => 'https://live-trader.markets.com/fxclient5/',      'type' => 'string',      'group' => 'Dynamic content',      'token' => TRUE,  );  $variables['dc_forbidden_countries'] = array(      'title' => t('Forbidden Countries'),      'default' => '',      'type' => 'string',      'group' => 'Dynamic content',      'token' => TRUE,  );  return $variables;}function _dynamic_content_update_forbidden_countries($form, &$form_state) {  file_unmanaged_save_data(      "<?php \$forbidden_countries = '" . $form_state['input']['dc_forbidden_countries'] . "';",      DRUPAL_ROOT . FORBIDDEN_COUNTRIES_CONFIG_FILE,      FILE_EXISTS_REPLACE  );}/** * Add our variables to JS * @param $page *//** * hook_page_build implementation - add our own data to JS * @param $page */function dynamic_content_page_build(&$page) {  ///@TODO - move this hook to infra module  $result = array();  foreach (module_implements('publish_js_variables') as $module) {    // Calling all modules implementing publish_js_variables and    // Returning results than pushing them into the $result array:    $result = array_merge_recursive(      $result,      module_invoke($module, 'publish_js_variables')    );  }  drupal_add_js($result, 'setting');}/** * hook_publish_js_variables implementation - It's hook of dynamic content module which * provide ability to push some variables to JS frontend * @return array */function dynamic_content_publish_js_variables() {  global $language;  module_load_include('inc', 'dynamic_content', 'dynamic_content_vars_meta');  $data = array(    'dynamicContent' => array(      'requestPath' => DC_REQUEST_PATH,      'language' => $language->language,      'countryCode' => $_SERVER["GEOIP2_COUNTRY_CODE"],    ),  );  $variables_meta = dynamic_content_variable_info();  foreach ($variables_meta as $name => $meta) {    if (!isset($meta['group'])) {      drupal_set_message(        "Does not defined group for variable: {$name}",        'error'      );      continue;    }    $groupName = underscoresToCamelCase($meta['group']);    if (!isset($data[$groupName])) {      $data[$groupName] = array();    }    $variable_value = variable_get_value($name);    if (isset($meta['translatable']) && $meta['translatable']) {      $variable_value = t($variable_value);    }    $data[$groupName][underscoresToCamelCase($name)] = $variable_value;  }  return $data;}/** * Filter functionality */function dynamic_content_filter_info() {  $filters['filter_dynamic_content'] = array(    'title' => t('Dynamic content (loading via AJAX)'),    'description' => _dc_get_replacments_descriptions(),    'process callback' => '_dc_filter_process',    'tips callback' => '_dc_filter_tips',  );  return $filters;}function _dc_filter_process($text, $filter) {  list($for_search, $for_replacement) = _dc_get_replacements();  $result = str_replace($for_search, $for_replacement, $text);  return $result;}function _dc_filter_tips($filter, $format, $long = FALSE) {  return t(_dc_get_replacments_descriptions());}function _dc_get_replacments_descriptions() {  module_load_include('inc', 'dynamic_content', 'dynamic_content_vars_meta');  $result = array("You can use following placeholders for specify some content which should be dynamically (via AJAX, according to user browser and etc.)");  $data = _dc_get_list_of_replacements();  foreach ($data as $name => $meta) {    $result[] = "[{$name}] - {$meta['name']} ({$meta['description']})";  }  return implode("<br>", $result);}/** * Provide data for hook_filter_process * (what we looking for and what we want to insert instead of it) * @return array - array with two elements: * 1. array of strings which we looking for for making replacements; * 2. array of replacements for items which we will find. */function _dc_get_replacements() {  module_load_include('inc', 'dynamic_content', 'dynamic_content_vars_meta');  $for_search = array();  $for_replacement = array();  $data = _dc_get_list_of_replacements();  foreach ($data as $name => $meta) {    $params = array(      'jsFunctionName' => underscoresToCamelCase($name),      'value' => $meta['default'],    );    $for_search[] = "[{$name}]";    $for_replacement[] = _dc_get_replacement($meta['template'], $params);  }  return array($for_search, $for_replacement);}/** * @param $template - string which contain template for this replacement * @param $params - parameters which should be replaced in $template * @return string - html for this replacement */function _dc_get_replacement($template, $params) {  foreach ($params as $param_name => $param_value) {    $template = str_replace("[{$param_name}]", $param_value, $template);  }  return $template;}/** * Provide ability to insert placeholders via php function in our sources * @param $replacement_name - name of replacement (see dynamic_content_vars_meta.inc file) * @return string - html for this replacement */function dc_insert($replacement_name) {  module_load_include('inc', 'dynamic_content', 'dynamic_content_vars_meta');  $replacements = _dc_get_list_of_replacements();  if (isset($replacements[$replacement_name])) {    $params = array(      'jsFunctionName' => underscoresToCamelCase($replacement_name),      'value' => $replacements[$replacement_name]['default'],    );    return _dc_get_replacement(      $replacements[$replacement_name]['template'],      $params    );  }  return '';}/** * End of filter functionality *//** * Bonus content type additional validation functionality */function dynamic_content_form_alter(&$form, &$form_state, $form_id) {  if ($form_id == 'bonus_info_node_form') {    $form['#validate'][] = '_dc_form_validate_bonus_info_field';  }  if ($form_id == 'variable_module_form') {    $form['#submit'][] = '_dynamic_content_update_forbidden_countries';  }}function _dc_form_validate_bonus_info_field($form, &$form_state) {  foreach ($form_state['values'][DC_BONUS_INFO_FIELD_NAME][LANGUAGE_NONE] as $value) {    if (!is_array($value) || $value['value'] === '') {      continue;    }    $parsed = explode(';', $value['value']);    if (count($parsed) != 4) {      form_set_error(DC_BONUS_INFO_FIELD_NAME, t('Wrong bonus info format'));    }  }  if (!count(form_get_errors())) {    cache_clear_all('dynamic_content_bonus_table', 'cache');    drupal_set_message('Bonus info cache has been cleared');  }}/** * End of bonus content type additional validation functionality */function underscoresToCamelCase($string) {  $str = str_replace(' ', '', ucwords(str_replace('_', ' ', $string)));  $str = lcfirst($str);  return $str;}